// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	new Tritangent();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Tritangent = function() {
	this.damp = 1;
	this.rotate = true;
	this.slide = true;
	this.t0 = 0;
	this.speed = .5;
	this.t = 0;
	this.selectedPoint = null;
	this.testingPoints = [];
	this.sf = 6;
	this.w = 480;
	this.h = this.w;
	var el = window.document.getElementById("canv");
	this.cursor = window.document.querySelector(".cursor");
	this.cursorVector = new Vec2();
	var canv = js_Boot.__cast(window.document.getElementById("canv") , HTMLCanvasElement);
	this.ctx = canv.getContext("2d");
	Tritang.ctx = GeomUtils.ctx = this.ctx;
	this.ctx.beginPath();
	this.ctx.fillStyle = "black";
	this.ctx.fillRect(0,0,this.w,this.h);
	this.ctx.font = "12px Courier New";
	this.O = new Vec2(this.w / 2,this.h / 2);
	Tritang.O = GeomUtils.O = this.O;
	this.mouse = new Vec2(0,0);
	this.anchor = new Vec2(0,0);
	var timer = new haxe_Timer(2);
	timer.run = $bind(this,this.loop);
	el.addEventListener("pointerdown",$bind(this,this.onMouseDown));
	el.addEventListener("pointermove",$bind(this,this.onMouseMove));
	el.addEventListener("pointerup",$bind(this,this.onMouseUp));
	this.isDown = false;
	this.A = new Vec2(0,-100);
	this.B = new Vec2(100,50);
	this.C = new Vec2(-100,50);
	this.com = new Vec2(this.A.x + this.B.x + this.C.x,this.A.y + this.B.y + this.C.y);
	this.com.x /= 3;
	this.com.y /= 3;
	this.comA = this.com.to(this.A);
	this.comA.normalize();
	this.comB = this.com.to(this.B);
	this.comB.normalize();
	this.comC = this.com.to(this.C);
	this.comC.normalize();
	this.testingPoints.push(this.A);
	this.testingPoints.push(this.B);
	this.testingPoints.push(this.C);
	this.Atemp = this.A.clone();
	this.trit1 = new Tritang(this.A,this.B,this.C);
	this.t = 1.001;
};
Tritangent.__name__ = true;
Tritangent.prototype = {
	onMouseUp: function(e) {
		e.preventDefault();
		this.isDown = false;
		this.selectedPoint = null;
		this.mouse.x = e.clientX - e.target.getBoundingClientRect().x;
		this.mouse.y = e.clientY - e.target.getBoundingClientRect().y;
		console.log("src/Tritangent.hx:113:","touch up");
	}
	,onMouseMove: function(e) {
		e.preventDefault();
		this.mouse.x = e.clientX - e.target.getBoundingClientRect().x;
		this.mouse.y = e.clientY - e.target.getBoundingClientRect().y;
	}
	,onMouseDown: function(e) {
		this.mouse.x = e.clientX - e.target.getBoundingClientRect().x;
		this.mouse.y = e.clientY - e.target.getBoundingClientRect().y;
		console.log("src/Tritangent.hx:132:","touch down");
		var found = false;
		var _g = 0;
		var _g1 = this.testingPoints;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var dx = this.O.x + a.x - this.mouse.x;
			var dy = this.O.y + a.y - this.mouse.y;
			if(dx * dx + dy * dy < 100) {
				found = true;
				this.selectedPoint = a;
			}
		}
		this.isDown = !found;
		e.preventDefault();
		this.anchor.x = this.mouse.x - this.O.x;
		this.anchor.y = this.mouse.y - this.O.y;
	}
	,loop: function() {
		var dxx = 242.5 - this.cursorVector.x;
		if(dxx > .9 && this.slide) {
			this.cursorVector.x += dxx * .015;
			this.cursorVector.y += (145.45454545454547 - this.cursorVector.y) * .02;
		} else if(this.rotate) {
			this.slide = false;
			this.t0 += .01;
			this.cursorVector.x += (242.5 + Math.cos(this.t0) * 50 - this.cursorVector.x) * .02 * this.damp;
			this.cursorVector.y += (170.45454545454547 + Math.sin(this.t0) * 50 - this.cursorVector.y) * 0.02 * this.damp;
			this.A.x = this.cursorVector.x - this.O.x;
			this.A.y = this.cursorVector.y - this.O.y;
		}
		if(this.t0 > 14) {
			this.damp /= 1.01;
			if(this.t0 > 18) {
				this.rotate = false;
				this.cursor.classList.add("fade");
			}
		}
		if(this.rotate) {
			this.cursor.style.left = this.cursorVector.x - 2 + "px";
			this.cursor.style.top = this.cursorVector.y + "px";
		}
		this.ctx.lineWidth = 1;
		this.ctx.clearRect(0,0,this.w,this.h);
		if(this.isDown) {
			this.O.x = this.mouse.x - this.anchor.x;
			this.O.y = this.mouse.y - this.anchor.y;
		}
		if(this.selectedPoint != null) {
			this.selectedPoint.x = this.mouse.x - this.O.x;
			this.selectedPoint.y = this.mouse.y - this.O.y;
		}
		this.drawCoord();
		this.trit1.render();
		this.ctx.globalAlpha = 1;
		var _g = 0;
		var _g1 = this.testingPoints;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
		}
	}
	,drawCoord: function() {
		this.ctx.beginPath();
		this.ctx.strokeStyle = "white";
		this.ctx.moveTo(0,this.O.y);
		this.ctx.lineTo(this.w,this.O.y);
		this.ctx.moveTo(this.O.x,0);
		this.ctx.lineTo(this.O.x,this.h);
		this.ctx.stroke();
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var tx = new Vec2(i * (this.w / 6),this.O.y);
			this.ctx.fillStyle = "white";
			this.ctx.beginPath();
			tx.y = this.O.y + 15;
			tx.y = Math.max(tx.y,15);
			tx.y = Math.min(tx.y,this.h);
			var xt = i / 6 * this.sf - this.O.x / this.w * this.sf;
			this.ctx.fillText((xt + "").substring(0,4),tx.x,tx.y);
			tx = new Vec2(this.O.x,i * (this.h / 6));
			this.ctx.beginPath();
			tx.x = this.O.x;
			tx.x = Math.max(tx.x,0);
			tx.x = Math.min(tx.x,this.w - 17);
			var xt1 = i / 6 * this.sf - this.O.y / this.w * this.sf;
			this.ctx.fillText((xt1 + "").substring(0,4),tx.x,tx.y);
			this.ctx.closePath();
		}
	}
	,__class__: Tritangent
};
var Tritang = function(A,B,C) {
	this.A = A;
	this.B = B;
	this.C = C;
};
Tritang.__name__ = true;
Tritang.prototype = {
	render: function() {
		var Abisect = GeomUtils.drawBisect(this.A,this.B,this.C);
		var Bbisect = GeomUtils.drawBisect(this.B,this.A,this.C);
		GeomUtils.drawBisect(this.C,this.A,this.B);
		var ss = GeomUtils.pointOfLineIntersection(this.A,Abisect,this.B,Bbisect);
		var ab = this.A.to(this.B);
		var ac = this.A.to(this.C);
		var bc = this.B.to(this.C);
		var ca = this.C.to(this.A);
		var s = (Math.sqrt(ab.dot(ab)) + Math.sqrt(bc.dot(bc)) + Math.sqrt(ca.dot(ca))) / 2;
		var cross = (ab.x * ac.y - ab.y * ac.x) / 2;
		var r = cross / s;
		var absr = Math.abs(r);
		Tritang.ctx.beginPath();
		Tritang.ctx.strokeStyle = "#00f6ff";
		Tritang.ctx.moveTo(Tritang.O.x + this.A.x,Tritang.O.y + this.A.y);
		Tritang.ctx.lineTo(Tritang.O.x + this.B.x,Tritang.O.y + this.B.y);
		Tritang.ctx.lineTo(Tritang.O.x + this.C.x,Tritang.O.y + this.C.y);
		Tritang.ctx.lineTo(Tritang.O.x + this.A.x,Tritang.O.y + this.A.y);
		Tritang.ctx.stroke();
		Tritang.ctx.beginPath();
		Tritang.ctx.arc(Tritang.O.x + ss.x,Tritang.O.y + ss.y,Math.abs(r),0,Math.PI * 2);
		Tritang.ctx.stroke();
		bc.x += this.C.x;
		bc.y += this.C.y;
		var CouterBisect = GeomUtils.drawBisect(this.C,this.A,bc);
		var cb = this.C.to(this.B);
		cb.x += this.B.x;
		cb.y += this.B.y;
		CouterBisect.normalize();
		Bbisect.normalize();
		var pint = GeomUtils.getRayIntersection(this.C,CouterBisect,this.B,Bbisect);
		var xrad = ss.to(pint).mag() - absr;
		Tritang.ctx.beginPath();
		Tritang.ctx.setLineDash([5,5]);
		Tritang.ctx.arc(Tritang.O.x + pint.x,Tritang.O.y + pint.y,xrad,0,Math.PI * 2);
		Tritang.ctx.strokeStyle = "white";
		Tritang.ctx.stroke();
		Tritang.ctx.setLineDash([]);
		var XB = GeomUtils.drawBisect(this.B,this.A,cb);
		ca.x += this.A.x;
		ca.y += this.A.y;
		var X2 = GeomUtils.drawBisect(this.A,this.B,ca);
		Abisect.normalize();
		XB.normalize();
		X2.normalize();
		var BCpoint = GeomUtils.getRayIntersection(this.A,Abisect,this.B,new Vec2(-XB.x,-XB.y));
		var com = ss.to(BCpoint);
		var rrad = com.mag() - absr;
		Tritang.ctx.beginPath();
		Tritang.ctx.setLineDash([5,5]);
		Tritang.ctx.arc(Tritang.O.x + BCpoint.x,Tritang.O.y + BCpoint.y,rrad,0,Math.PI * 2);
		Tritang.ctx.strokeStyle = "white";
		Tritang.ctx.stroke();
		Tritang.ctx.setLineDash([]);
		var intrs = GeomUtils.getRayIntersection(this.A,X2,this.B,XB);
		var centerToInters = ss.to(intrs);
		var rad1 = centerToInters.mag() - absr;
		Tritang.ctx.beginPath();
		Tritang.ctx.setLineDash([5,5]);
		Tritang.ctx.arc(Tritang.O.x + intrs.x,Tritang.O.y + intrs.y,rad1,0,Math.PI * 2);
		Tritang.ctx.stroke();
		Tritang.ctx.setLineDash([]);
		Tritang.ctx.beginPath();
		Tritang.ctx.moveTo(Tritang.O.x + intrs.x,Tritang.O.y + intrs.y);
		Tritang.ctx.lineTo(Tritang.O.x + BCpoint.x,Tritang.O.y + BCpoint.y);
		Tritang.ctx.lineTo(Tritang.O.x + pint.x,Tritang.O.y + pint.y);
		Tritang.ctx.lineTo(Tritang.O.x + intrs.x,Tritang.O.y + intrs.y);
		Tritang.ctx.strokeStyle = "orange";
		Tritang.ctx.lineWidth = 2;
		Tritang.ctx.stroke();
		GeomUtils.drawPoint(intrs,"white");
		GeomUtils.drawPoint(BCpoint,"white");
		GeomUtils.drawPoint(pint,"white");
		GeomUtils.drawPoint(this.A);
		GeomUtils.drawPoint(this.B);
		GeomUtils.drawPoint(this.C);
	}
	,__class__: Tritang
};
var Vec2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
Vec2.__name__ = true;
Vec2.prototype = {
	to: function(v) {
		return new Vec2(v.x - this.x,v.y - this.y);
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y;
	}
	,mag: function() {
		return Math.sqrt(this.dot(this));
	}
	,normalize: function() {
		var len = this.mag();
		this.x /= len;
		this.y /= len;
	}
	,scale: function(s) {
		this.x *= s;
		this.y *= s;
	}
	,clone: function() {
		return new Vec2(this.x,this.y);
	}
	,__class__: Vec2
};
var GeomUtils = function() { };
GeomUtils.__name__ = true;
GeomUtils.getRayIntersection = function(a,n,b,m) {
	var k = (n.x * b.y + n.y * a.x - n.x * a.y - n.y * b.x) / (n.y * m.x - n.x * m.y);
	var t = (b.y + m.y * k - a.y) / n.y;
	return new Vec2(a.x + n.x * t,a.y + n.y * t);
};
GeomUtils.clamp = function(value,min,max) {
	if(value <= max && value >= min) {
		return value;
	} else if(max < value) {
		return max;
	} else {
		return min;
	}
};
GeomUtils.pointOfLineIntersection = function(p1,q1,p2,q2) {
	var d1 = p1.to(q1);
	var d2 = p2.to(q2);
	var r = p2.to(p1);
	var a = d1.dot(d1);
	var b = d1.dot(d2);
	var c = d1.dot(r);
	var e = d2.dot(d2);
	var f = d2.dot(r);
	var d = a * e - b * b;
	var s = (b * f - c * e) / d;
	if(d != 0) {
		s = GeomUtils.clamp(s,0,1);
	} else {
		s = 0;
	}
	var t = (b * s + f) / e;
	if(t < 0) {
		t = 0;
		s = GeomUtils.clamp(-c / a,0,1);
	} else if(t > 1) {
		t = 1;
		s = GeomUtils.clamp((b - c) / a,0,1);
	}
	return new Vec2(p1.x + d1.x * s,p1.y + d1.y * s);
};
GeomUtils.drawBisect = function(A,B,C) {
	var ab = new Vec2(B.x - A.x,B.y - A.y);
	var ac = new Vec2(C.x - A.x,C.y - A.y);
	var dot = ac.x * ab.x + ac.y * ab.y;
	var lab = Math.sqrt(ab.x * ab.x + ab.y * ab.y);
	var lac = Math.sqrt(ac.x * ac.x + ac.y * ac.y);
	ab.x /= lab;
	ab.y /= lab;
	ac.x /= lac;
	ac.y /= lac;
	var r = 50000;
	var abac = new Vec2(A.x + r * (ab.x + ac.x) / 2,A.y + r * (ab.y + ac.y) / 2);
	GeomUtils.drawPoint(abac);
	GeomUtils.ctx.beginPath();
	GeomUtils.ctx.strokeStyle = "deeppink";
	GeomUtils.ctx.moveTo(GeomUtils.O.x + A.x,GeomUtils.O.y + A.y);
	GeomUtils.ctx.lineTo(GeomUtils.O.x + abac.x,GeomUtils.O.y + abac.y);
	GeomUtils.ctx.moveTo(GeomUtils.O.x + A.x,GeomUtils.O.y + A.y);
	GeomUtils.ctx.lineTo(GeomUtils.O.x - abac.x,GeomUtils.O.y - abac.y);
	GeomUtils.ctx.stroke();
	return abac;
};
GeomUtils.drawPoint = function(v,color) {
	if(color == null) {
		color = "red";
	}
	GeomUtils.ctx.beginPath();
	GeomUtils.ctx.fillStyle = color;
	GeomUtils.ctx.arc(v.x + GeomUtils.O.x,v.y + GeomUtils.O.y,5,0,Math.PI * 2);
	GeomUtils.ctx.fill();
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
