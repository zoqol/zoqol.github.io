// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() {
	this.mo = { x : 0, y : 0};
	this.cam_height = 80;
	this.MAX_RAY_DIST = 1000;
	this.isDown = false;
	var canv = js_Boot.__cast(window.document.getElementById("canv") , HTMLCanvasElement);
	this.ctx = canv.getContext("2d",null);
	this.ctx.beginPath();
	this.ctx.fillStyle = "black";
	this.ctx.fillRect(0,0,50,50);
	this.bodies = [];
	this.rays = [];
	this.testlist = [];
	Canvas.setCanvas(this.ctx);
	var vrtx = [];
	vrtx.push(new Vec2D(-12,-30));
	vrtx.push(new Vec2D(12,-30));
	vrtx.push(new Vec2D(20,this.cam_height));
	vrtx.push(new Vec2D(-20,this.cam_height));
	var flash = new RigidBody(new Polygon(vrtx));
	this.bodies.push(flash);
	flash.p.x = 100;
	flash.p.y = 100;
	this.joint = new JointConstraint(.007,null);
	var body = new RigidBody(new Polygon(Polygon.createVertices(3,100)));
	body.p.x = 300;
	body.p.y = 300;
	body.setAngle(Math.PI / 4);
	this.bodies.push(body);
	this.testlist.push(body);
	body = new RigidBody(new Polygon(Polygon.createVertices(4,60)));
	body.p.x = 100;
	body.p.y = 300;
	body.setAngle(Math.PI / 4);
	this.bodies.push(body);
	this.testlist.push(body);
	body = new RigidBody(new Polygon(Polygon.createVertices(5,40)));
	body.p.x = 280;
	body.p.y = 150;
	body.setAngle(Math.PI / 4);
	this.bodies.push(body);
	this.testlist.push(body);
	body = new RigidBody(new Cirlce(50));
	body.p.x = 380;
	body.p.y = 50;
	this.bodies.push(body);
	this.testlist.push(body);
	var o = flash.p;
	var pi = Math.PI;
	var start = pi / 14;
	var step = start / 10;
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		var ray = new Ray(o,new Vec2D(Math.sin(start),Math.cos(start)));
		start -= step;
		this.rays.push(ray);
	}
	flash.torque = .1;
	var timer = new haxe_Timer(2);
	timer.run = $bind(this,this.loop);
	canv.addEventListener("mousemove",$bind(this,this.onMouseMove));
	canv.addEventListener("mousedown",$bind(this,this.onMouseDown));
	canv.addEventListener("mouseup",$bind(this,this.onMouseUp));
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.prototype = {
	onMouseUp: function(e) {
		this.isDown = false;
	}
	,onMouseDown: function(e) {
		var m = new Vec2D(this.mo.x,this.mo.y);
		var _g1 = 0;
		var _g = this.bodies.length;
		while(_g1 < _g) {
			var i = _g1++;
			var bd = this.bodies[i];
			var mat = bd.matrix;
			var p = new Vec2D(m.x,m.y);
			if(bd.shape.contains(p,bd.p,bd.matrix)) {
				this.joint.ref = p;
				this.joint.body = bd;
				this.isDown = true;
				break;
			}
		}
	}
	,onMouseMove: function(e) {
		this.mo = { x : e.offsetX, y : e.offsetY};
	}
	,sortF: function(a,b) {
		var ray = this.rays[js_Boot.__cast(this.rays.length / 2 , Int)];
		var dir = ray.dir;
		var o = this.bodies[0].p;
		var od = dir.x * o.x + dir.y * o.y;
		var ad = a.p.x * dir.x + a.p.y * dir.y - od;
		var bd = b.p.x * dir.x + b.p.y * dir.y - od;
		return ad - bd;
	}
	,loop: function() {
		Canvas.clear();
		var bdi = this.bodies[0];
		var mat = bdi.matrix;
		var x;
		var y;
		this.testlist.sort($bind(this,this.sortF));
		var _g = 0;
		var _g1 = this.rays;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			var d = r.odir;
			x = d.x * mat.c + d.y * mat.d;
			y = d.x * mat.a + d.y * mat.b;
			r.dir.x = x;
			r.dir.y = y;
			var bi = new Vec2D();
			var ci = new Vec2D();
			var LEN = this.testlist.length;
			var i = 0;
			var f = false;
			while(i < LEN && f == false) {
				var bo = this.testlist[i];
				var t;
				if(bo.shape.getType() == 1) {
					if(Polygon.testRayPolygon(r.o,r.dir,js_Boot.__cast(bo.shape , Polygon),bo.p,bo.matrix)) {
						t = js_Boot.__cast(r.o.userData , Float);
						bi.x = r.dir.x * t;
						bi.y = r.dir.y * t;
						bi.x += r.o.x;
						bi.y += r.o.y;
						ci.x = r.o.x + r.dir.x * this.cam_height;
						ci.y = r.o.y + r.dir.y * this.cam_height;
						Canvas.drawLine(ci,bi,"#ff0011");
						Canvas.drawDot(bi,1,"#00ffff");
						f = true;
						break;
					}
				} else if(Ray.testAgainstCircle(r.o,r.dir,bo.shape)) {
					t = r.dir.userData;
					bi.x = r.dir.x * t;
					bi.y = r.dir.y * t;
					bi.x += r.o.x;
					bi.y += r.o.y;
					ci.x = r.o.x + r.dir.x * this.cam_height;
					ci.y = r.o.y + r.dir.y * this.cam_height;
					Canvas.drawLine(ci,bi,"#00aaff");
					Canvas.drawDot(bi,1,"#00ffff");
					f = true;
					break;
				}
				++i;
			}
			if(f == false) {
				bi.x = r.dir.x * this.MAX_RAY_DIST;
				bi.y = r.dir.y * this.MAX_RAY_DIST;
				bi.x += r.o.x;
				bi.y += r.o.y;
				ci.x = r.o.x + r.dir.x * this.cam_height;
				ci.y = r.o.y + r.dir.y * this.cam_height;
				Canvas.drawLine(ci,bi,"#ffffff");
			}
		}
		var m = new Vec2D(this.mo.x,this.mo.y);
		var _g2 = 0;
		var _g11 = this.bodies;
		while(_g2 < _g11.length) {
			var b = _g11[_g2];
			++_g2;
			Canvas.drawBody(b);
			Canvas.drawDot(m);
			if(this.isDown && this.joint.body == b) {
				this.joint.loc.x = m.x;
				this.joint.loc.y = m.y;
				this.joint.update();
			}
			b.damping();
			b.integrate();
		}
	}
	,__class__: Main
};
var Canvas = function() { };
Canvas.__name__ = true;
Canvas.setCanvas = function(g) {
	Canvas.canvas = g;
};
Canvas.drawDot = function(v,t,c,r) {
	if(r == null) {
		r = 4;
	}
	if(c == null) {
		c = "#aa0000";
	}
	if(t == null) {
		t = 1;
	}
	Canvas.canvas.beginPath();
	Canvas.canvas.strokeStyle = "white";
	Canvas.canvas.arc(v.x,v.y,r,0,Math.PI * 2);
	Canvas.canvas.closePath();
	Canvas.canvas.stroke();
};
Canvas.drawBody = function(body) {
	var sh = body.shape;
	if(sh.getType() == 1) {
		Canvas.drawPoly(js_Boot.__cast(sh , Polygon),body.p,body.matrix);
	} else {
		Canvas.drawCirlce(body.p,(js_Boot.__cast(sh , Cirlce)).r);
	}
};
Canvas.clear = function() {
	Canvas.canvas.fillStyle = "black";
	Canvas.canvas.clearRect(0,0,480,480);
	Canvas.canvas.fillRect(0,0,480,480);
};
Canvas.stroke = function() {
	Canvas.canvas.stroke();
};
Canvas.drawLine = function(a,b,c) {
	if(c == null) {
		c = "0";
	}
	Canvas.canvas.beginPath();
	Canvas.canvas.strokeStyle = c + "";
	Canvas.canvas.moveTo(a.x,a.y);
	Canvas.canvas.lineTo(b.x,b.y);
	Canvas.canvas.closePath();
	Canvas.canvas.stroke();
};
Canvas.drawCirlce = function(c,r,cl) {
	if(cl == null) {
		cl = "#ffffff";
	}
	Canvas.canvas.beginPath();
	Canvas.canvas.strokeStyle = cl;
	Canvas.canvas.arc(c.x,c.y,r,0,Math.PI * 2);
	Canvas.canvas.closePath();
	Canvas.canvas.stroke();
};
Canvas.drawPoly = function(poly,p,mat,c) {
	if(c == null) {
		c = "#eeeeee";
	}
	Canvas.canvas.beginPath();
	var n = poly.vertices.length;
	var v = poly.vertices;
	var x;
	var y;
	var a = new Vec2D(v[0].x,v[0].y);
	x = a.x * mat.c + a.y * mat.d;
	y = a.x * mat.a + a.y * mat.b;
	a.x = x;
	a.y = y;
	a.x += p.x;
	a.y += p.y;
	Canvas.canvas.strokeStyle = c + "";
	Canvas.canvas.moveTo(a.x,a.y);
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		var buf = v[i + 1 == n ? 0 : i + 1];
		a = new Vec2D(buf.x,buf.y);
		x = a.x * mat.c + a.y * mat.d;
		y = a.x * mat.a + a.y * mat.b;
		a.x = x;
		a.y = y;
		a.x += p.x;
		a.y += p.y;
		Canvas.canvas.lineTo(a.x,a.y);
	}
	Canvas.canvas.closePath();
	Canvas.canvas.stroke();
};
var IGeometricShape = function() { };
IGeometricShape.__name__ = true;
IGeometricShape.prototype = {
	__class__: IGeometricShape
};
var Polygon = function(vertices) {
	this.vertices = vertices;
	this.calcOtherThings();
};
Polygon.__name__ = true;
Polygon.__interfaces__ = [IGeometricShape];
Polygon.testRayPolygon = function(o,dir,poly,pos,mat) {
	var len = poly.vertices.length;
	var v = poly.vertices;
	var c = 0;
	var dist = 1000;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var bu = v[i];
		var q = new Vec2D(bu.x,bu.y);
		if(i + 1 < len) {
			bu = v[i + 1];
		} else {
			bu = v[0];
		}
		var p = new Vec2D(bu.x,bu.y);
		var x;
		var y;
		var a = q;
		x = a.x * mat.c + a.y * mat.d;
		y = a.x * mat.a + a.y * mat.b;
		a.x = x;
		a.y = y;
		a.x += pos.x;
		a.y += pos.y;
		a = p;
		x = a.x * mat.c + a.y * mat.d;
		y = a.x * mat.a + a.y * mat.b;
		a.x = x;
		a.y = y;
		a.x += pos.x;
		a.y += pos.y;
		if(Polygon.testLineIntesection(q,p,o,dir)) {
			++c;
			dist = Math.min(dist,Math.abs(js_Boot.__cast(dir.userData , Float)));
		}
	}
	if(c > 0 && (c & 1) == 0) {
		o.userData = dist;
		return true;
	}
	return false;
};
Polygon.testLineIntesection = function(a,b,o,dir) {
	var n = new Vec2D(-dir.y,dir.x);
	var ab = new Vec2D(b.x - a.x,b.y - a.y);
	var t = (o.x * n.x + o.y * n.y - (a.x * n.x + a.y * n.y)) / (ab.x * n.x + ab.y * n.y);
	if(t <= 1 && t >= 0) {
		var t1 = (a.x + ab.x * t) * dir.x + (a.y + ab.y * t) * dir.y;
		t1 -= o.x * dir.x + o.y * dir.y;
		if(t1 > 0) {
			dir.userData = t1;
			return true;
		}
	}
	return false;
};
Polygon.createVertices = function(n,r) {
	var vrtx = [];
	var _2PI = Math.PI * 2;
	var theta = 0;
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		theta = _2PI * (i / n);
		vrtx[i] = new Vec2D(r * Math.cos(theta),r * Math.sin(theta));
	}
	return vrtx;
};
Polygon.prototype = {
	getTransformedVertices: function() {
		return null;
	}
	,contains: function(p,pos,mat) {
		var w = new Vec2D(p.x - pos.x,p.y - pos.y);
		var x;
		var y;
		x = w.x * mat.c + w.y * mat.a;
		y = w.x * mat.d + w.y * mat.b;
		p.x = x;
		p.y = y;
		var vrtx = this.vertices;
		var n = vrtx.length;
		var ab = new Vec2D();
		var pp = new Vec2D();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var p1 = vrtx[i];
			var p2 = i + 1 < n ? vrtx[i + 1] : vrtx[0];
			var ec = (p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x);
			if(ec < 0) {
				return false;
			}
		}
		return true;
	}
	,getType: function() {
		return 1;
	}
	,calcOtherThings: function() {
		var d = 1;
		var center = new Vec2D();
		var area = 0;
		var I = 0;
		var vrtx = this.vertices;
		var n = vrtx.length;
		var inv3 = 0.33333333333333331;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var p1 = vrtx[i];
			var p2 = i + 1 < n ? vrtx[i + 1] : vrtx[0];
			var triArea = .5 * (p1.x * p2.y - p1.y * p2.x);
			area += triArea;
			center.x += (p1.x + p2.x) * inv3 * triArea;
			center.y += (p1.y + p2.y) * inv3 * triArea;
			I += triArea * (p2.x * p2.x + p2.y * p2.y + (p2.x * p1.x + p2.y * p1.y) + (p1.x * p1.x + p1.y * p1.y));
		}
		var m = area * d;
		this.inertia = I;
		var tk = 1 / area;
		center.x *= tk;
		center.y *= tk;
		this.center = center;
	}
	,getMOI: function() {
		return this.inertia;
	}
	,getCenter: function() {
		return this.center;
	}
	,__class__: Polygon
};
var RigidBody = function(shape,x,y,mass) {
	if(mass == null) {
		mass = .5;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 1;
	}
	this.shape = shape;
	this.m = mass;
	this.p = new Vec2D(x,y);
	if(shape.getType() == 2) {
		(js_Boot.__cast(shape , Cirlce)).center = this.p;
	}
	this.a = new Vec2D();
	this.v = new Vec2D();
	this.alpha = 0;
	this.omega = 0;
	this.theta = 0;
	this.torque = 0;
	this.moi = shape.getMOI();
	this.matrix = new Matrix2X2(0);
};
RigidBody.__name__ = true;
RigidBody.prototype = {
	setAngle: function(t) {
		this.theta = t;
		this.matrix.setAngle(t);
	}
	,integrate: function() {
		this.v.x += this.a.x;
		this.v.y += this.a.y;
		this.p.x += this.v.x;
		this.p.y += this.v.y;
		this.a.x = this.a.y = 0;
		this.a.x *= 0;
		this.a.y *= 0;
		this.alpha += this.torque;
		this.omega += this.alpha;
		this.theta += this.omega;
		this.torque = 0;
		this.alpha = 0;
		if(this.theta > Math.PI * 2 || this.theta < -Math.PI * 2) {
			this.theta = 0;
		}
		this.setAngle(this.theta);
	}
	,damping: function() {
		var k = -.03 / this.m;
		var f = new Vec2D();
		this.a.x += this.v.x * k;
		this.a.y += this.v.y * k;
		this.omega *= .95;
	}
	,__class__: RigidBody
};
var JointConstraint = function(k,body) {
	this.k = k;
	this.body = body;
	this.loc = new Vec2D();
};
JointConstraint.__name__ = true;
JointConstraint.prototype = {
	isActive: function() {
		return this.ref != null;
	}
	,update: function() {
		if(this.isActive()) {
			var x;
			var y;
			var u = new Vec2D(this.ref.x,this.ref.y);
			var matrix = this.body.matrix;
			x = u.x * matrix.c + u.y * matrix.d;
			y = u.x * matrix.a + u.y * matrix.b;
			u.x = x;
			u.y = y;
			u.x += this.body.p.x;
			u.y += this.body.p.y;
			Canvas.drawDot(u);
			var l = this.loc;
			var f = new Vec2D((l.x - u.x) * this.k,(l.y - u.y) * this.k);
			var torq = -(f.x * (this.body.p.y - u.y) - f.y * (this.body.p.x - u.x));
			var alp = torq / (this.body.moi * .00001 * this.body.m);
			this.body.a.x += f.x / this.body.m;
			this.body.a.y += f.y / this.body.m;
			this.body.alpha = alp;
		}
	}
	,__class__: JointConstraint
};
var Ray = function(o,dir) {
	this.o = o;
	this.dir = dir;
	this.odir = new Vec2D(dir.x,dir.y);
};
Ray.__name__ = true;
Ray.testAgainstCircle = function(o,dir,circle) {
	var cn = circle.getCenter();
	var r2 = circle.r * circle.r;
	var m = new Vec2D(o.x - cn.x,o.y - cn.y);
	var b = m.x * dir.x + m.y * dir.y;
	var c = m.x * m.x + m.y * m.y - r2;
	if(c > 0 && b > 0) {
		return false;
	}
	var delt = b * b - c;
	if(delt <= 0) {
		return false;
	}
	var t = -b - Math.sqrt(delt);
	if(t < 0) {
		t = 0;
	} else {
		t = t;
	}
	dir.userData = t;
	return true;
};
Ray.prototype = {
	__class__: Ray
};
var Cirlce = function(r) {
	this.r = r;
	this.I = Math.PI / 2 / Math.pow(r,4);
};
Cirlce.__name__ = true;
Cirlce.__interfaces__ = [IGeometricShape];
Cirlce.prototype = {
	getCenter: function() {
		return this.center;
	}
	,getMOI: function() {
		return this.I;
	}
	,getType: function() {
		return 2;
	}
	,contains: function(p,pos,mat) {
		var w = new Vec2D(p.x - pos.x,p.y - pos.y);
		p.x = w.x;
		p.y = w.y;
		var o = w.x * w.x + w.y * w.y <= this.r * this.r;
		return o;
	}
	,__class__: Cirlce
};
var ShapeType = function() { };
ShapeType.__name__ = true;
var Vec2D = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
Vec2D.__name__ = true;
Vec2D.prototype = {
	__class__: Vec2D
};
var Matrix2X2 = function(t) {
	this.setAngle(t);
};
Matrix2X2.__name__ = true;
Matrix2X2.prototype = {
	setAngle: function(t) {
		this.a = -Math.sin(t);
		this.b = Math.cos(t);
		this.c = this.b;
		this.d = -this.a;
	}
	,__class__: Matrix2X2
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
	,__class__: haxe_Timer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
ShapeType.POLYGON = 1;
ShapeType.CIRCLE = 2;
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
